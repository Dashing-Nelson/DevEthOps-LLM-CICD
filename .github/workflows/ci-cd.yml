name: DevEthOps CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      run_full_pipeline:
        description: 'Run full pipeline including deployment'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.10'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy pre-commit

    - name: Install package
      run: pip install -e .

    - name: Run code formatting check
      run: black --check --diff src/ scripts/ test_pipeline.py

    - name: Run linting
      run: flake8 src/ scripts/ test_pipeline.py --max-line-length=88 --extend-ignore=E203,W503

    - name: Run type checking
      run: mypy src/ --ignore-missing-imports

    - name: Run tests
      run: |
        pytest -v --cov=src/devethops --cov-report=xml --cov-report=html
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Fairness and Ethics Testing
  ethical-checks:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Run pipeline test
      run: python test_pipeline.py

    - name: Run fairness checks
      run: python scripts/run_pipeline.py --stage test --config configs/settings.yaml

    - name: Generate fairness report
      run: |
        mkdir -p reports
        python -c "
        import json
        import os
        from pathlib import Path
        
        # Find latest pipeline output
        outputs_dir = Path('pipeline_outputs')
        if outputs_dir.exists():
            latest_run = max(outputs_dir.glob('pipeline_*'), key=os.path.getctime, default=None)
            if latest_run and (latest_run / 'pipeline_report.json').exists():
                with open(latest_run / 'pipeline_report.json', 'r') as f:
                    report = json.load(f)
                
                # Create HTML report
                html_content = f'''
                <html>
                <head><title>DevEthOps Fairness Report</title></head>
                <body>
                <h1>Fairness Assessment Report</h1>
                <h2>Pipeline: {latest_run.name}</h2>
                <pre>{json.dumps(report, indent=2)}</pre>
                </body>
                </html>
                '''
                
                with open('reports/fairness_report.html', 'w') as f:
                    f.write(html_content)
        "

    - name: Upload fairness report
      uses: actions/upload-artifact@v3
      with:
        name: fairness-report
        path: reports/

    - name: Comment PR with fairness results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Check if pipeline outputs exist
          const outputsPath = 'pipeline_outputs';
          if (fs.existsSync(outputsPath)) {
            const runs = fs.readdirSync(outputsPath);
            if (runs.length > 0) {
              const latestRun = runs.sort().pop();
              const reportPath = path.join(outputsPath, latestRun, 'pipeline_summary.txt');
              
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## üîç DevEthOps Fairness Check Results\n\n\`\`\`\n${report}\n\`\`\``
                });
              }
            }
          }

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    needs: [code-quality, ethical-checks]
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_full_pipeline == 'true')
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.run_full_pipeline == 'true')
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image digest: ${{ needs.build-and-push.outputs.image-digest }}"
        # Add your staging deployment logic here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Image digest: ${{ needs.build-and-push.outputs.image-digest }}"
        # Add your production deployment logic here

    - name: Create release
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from DevEthOps CI/CD pipeline
          
          ## Changes
          - Ethical AI checks passed ‚úÖ
          - Security scans completed ‚úÖ
          - Docker image published ‚úÖ
          
          ## Image
          `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}`
        draft: false
        prerelease: false
