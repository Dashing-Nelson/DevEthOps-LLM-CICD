version: '3.8'

services:
  # DevEthOps API Service
  devethops-api:
    build:
      context: .
      target: api
    ports:
      - "8000:8000"
    environment:
      - MODEL_PATH=/app/models/model.joblib
      - PREPROCESSOR_PATH=/app/models/preprocessor.joblib
      - PIPELINE_ID=default
      - LOG_LEVEL=INFO
    volumes:
      - ./pipeline_outputs:/app/models
      - ./configs:/app/configs:ro
      - ./data:/app/data:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - devethops-network

  # DevEthOps Pipeline Runner
  devethops-pipeline:
    build:
      context: .
      target: pipeline
    environment:
      - CONFIG_PATH=/app/configs/settings.yaml
      - DATA_PATH=/app/data
      - OUTPUT_PATH=/app/pipeline_outputs
      - LOG_LEVEL=INFO
    volumes:
      - ./configs:/app/configs:ro
      - ./data:/app/data:ro
      - ./pipeline_outputs:/app/pipeline_outputs
    depends_on:
      - devethops-api
    networks:
      - devethops-network
    profiles:
      - pipeline

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - devethops-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - devethops-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - devethops-network
    profiles:
      - cache

  # MinIO for object storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=devethops
      - MINIO_ROOT_PASSWORD=devethops123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - devethops-network
    profiles:
      - storage

volumes:
  prometheus_data:
  grafana_data:
  redis_data:
  minio_data:

networks:
  devethops-network:
    driver: bridge
