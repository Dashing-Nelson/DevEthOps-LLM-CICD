apiVersion: apps/v1
kind: Deployment
metadata:
  name: devethops-framework
  labels:
    app: devethops-framework
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: devethops-framework
  template:
    metadata:
      labels:
        app: devethops-framework
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: devethops-service-account
      containers:
      - name: devethops-framework
        image: devethops/framework:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8080
          name: metrics
        env:
        - name: DEVETHOPS_ENV
          value: "kubernetes"
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: devethops-config
              key: postgres_host
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: devethops-secrets
              key: postgres_password
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: devethops-config
              key: redis_host
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
      volumes:
      - name: config-volume
        configMap:
          name: devethops-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: devethops-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: devethops-logs-pvc
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "gpu"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - devethops-framework
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: devethops-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: devethops-logs-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: devethops-service-account
  labels:
    app: devethops-framework

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: devethops-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: devethops-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: devethops-service-account
  namespace: default
roleRef:
  kind: ClusterRole
  name: devethops-cluster-role
  apiGroup: rbac.authorization.k8s.io
